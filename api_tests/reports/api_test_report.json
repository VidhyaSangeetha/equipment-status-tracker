{
  "stats": {
    "suites": 4,
    "tests": 23,
    "passes": 19,
    "pending": 4,
    "failures": 0,
    "start": "2025-08-15T05:35:47.040Z",
    "end": "2025-08-15T05:35:55.180Z",
    "duration": 8140,
    "testsRegistered": 23,
    "passPercent": 100,
    "pendingPercent": 17.391304347826086,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1d0603d8-4465-4512-a50e-e694609c3ff3",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5abbb779-30e0-493e-a798-5560656bf563",
          "title": "Equipment Tracker API tests",
          "fullFile": "/Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/tests/equipmentlist.js",
          "file": "/tests/equipmentlist.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Test Data- Create a new equipment in \"Equipment Tracker API tests\"",
              "fullTitle": "Equipment Tracker API tests \"before all\" hook: Test Data- Create a new equipment in \"Equipment Tracker API tests\"",
              "timedOut": false,
              "duration": 322,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = { name: faker.commerce.productName(), status: status, location: location }\nconst content = await go.post(fromEquipment, payload);\nequipmentId = content.id;",
              "err": {},
              "uuid": "4502953a-c05e-4d07-93eb-fb5328f474e4",
              "parentUUID": "5abbb779-30e0-493e-a798-5560656bf563",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: Delete created equipment in \"Equipment Tracker API tests\"",
              "fullTitle": "Equipment Tracker API tests \"after all\" hook: Delete created equipment in \"Equipment Tracker API tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (equipmentId) {\n // await go.remove(`${fromEquipment}/${equipmentId}`)\n}",
              "err": {},
              "uuid": "32851d9e-2d4c-4301-861b-84a034f0fcdb",
              "parentUUID": "5abbb779-30e0-493e-a798-5560656bf563",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "dcfbbacc-70d6-40f1-acf9-47bc2795db87",
              "title": "Equipment Status Tracker Positive Tests ",
              "fullFile": "/Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/tests/equipmentlist.js",
              "file": "/tests/equipmentlist.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "API001 Get all equipments and validate the keys",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Positive Tests  API001 Get all equipments and validate the keys",
                  "timedOut": false,
                  "duration": 312,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const content = await go.getAll(fromEquipment)\n      expect(content).to.be.an('array');\n      content.forEach(item => {\n        expect(item).to.have.all.keys('id', 'name', 'status', 'location', 'lastUpdated');\n        expect(item.id).to.be.a('number').and.greaterThan(0);\n        expect(item.name).to.be.a('string');\n        expect(item.status).to.be.a('string');\n        expect(item.location).to.be.a('string');\n        expect(item.status).to.be.oneOf(['Idle', 'Under Maintenance', 'Active']);\n      });",
                  "err": {},
                  "uuid": "0c16d0d1-d1d2-48a4-b34f-943a2edb180d",
                  "parentUUID": "dcfbbacc-70d6-40f1-acf9-47bc2795db87",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API002 POST Creates a new equipment in random status",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Positive Tests  API002 POST Creates a new equipment in random status",
                  "timedOut": false,
                  "duration": 299,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { name: faker.commerce.productName(), status: status, location: location }\nconst content = await go.post(fromEquipment, payload);\nexpect(content).to.have.property('name', payload.name);\nexpect(content).to.have.property('status', payload.status);\nexpect(content).to.have.property('location', payload.location);\nexpect(content).to.have.property('lastUpdated');\nexpect(content).to.have.property('id');\nexpect(content).to.have.all.keys('id', 'name', 'status', 'location', 'lastUpdated');\nexpect(content.id).to.be.a('number').and.greaterThan(0);\nexpect(content.name).to.be.a('string').and.not.empty;\nexpect(content.status).to.be.a('string').and.not.empty;\nexpect(content.location).to.be.a('string').and.not.empty;\nexpect(content.lastUpdated).to.be.a('string').and.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\nexpect(content.status).to.be.oneOf(['Idle', 'Under Maintenance', 'Active']);\nexpect(content.id).to.be.a('number').and.greaterThan(0);",
                  "err": {},
                  "uuid": "0ce9506a-63aa-4839-9f2d-6b8a640f36ee",
                  "parentUUID": "dcfbbacc-70d6-40f1-acf9-47bc2795db87",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API003 POST Updates status of equipment",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Positive Tests  API003 POST Updates status of equipment",
                  "timedOut": false,
                  "duration": 303,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let status = _.first(_.shuffle(['Idle', 'Under Maintenance', 'Active']));\nconst payload = { status: status };\nconst content = await go.post(`${fromEquipment}/${equipmentId}/status`, payload);\nexpect(content.equipment.status).to.be.oneOf(['Idle', 'Under Maintenance', 'Active']);\nexpect(content.equipment).to.have.property('id', equipmentId);\nexpect(content.equipment).to.have.property('lastUpdated');\nexpect(content.equipment).to.have.property('name');\nexpect(content.equipment).to.have.property('location');\nexpect(content.equipment).to.have.all.keys('id', 'name', 'status', 'location', 'lastUpdated');\nexpect(content.equipment.id).to.equal(equipmentId);\nexpect(content.historyEntry.equipmentId).to.equal(equipmentId);\nexpect(content.historyEntry.previousStatus).to.be.oneOf(['Idle', 'Under Maintenance', 'Active']);\nexpect(content.historyEntry.newStatus).to.equal(status);\nexpect(content.historyEntry.timestamp).to.be.a('string').and.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\nexpect(content.historyEntry.changedBy).to.be.a('string').and.not.empty;\nexpect(content.historyEntry).to.have.all.keys('id', 'equipmentId', 'previousStatus', 'newStatus', 'timestamp', 'changedBy');",
                  "err": {},
                  "uuid": "4ed3b259-015e-4491-96dc-171a3d38fd1d",
                  "parentUUID": "dcfbbacc-70d6-40f1-acf9-47bc2795db87",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API004 GET equipment history",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Positive Tests  API004 GET equipment history",
                  "timedOut": false,
                  "duration": 307,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const content = await go.getAll(`${fromEquipment}/${equipmentId}/history`);\nexpect(content.equipmentId).to.equal(equipmentId);\nexpect(content.history).to.be.an('array');\nif (content.history.length > 0) {\n  content.history.forEach(entry => {\n    expect(entry).to.have.all.keys('id', 'equipmentId', 'previousStatus', 'newStatus', 'timestamp', 'changedBy');\n    expect(entry.equipmentId).to.equal(equipmentId);\n    expect(entry.previousStatus).to.be.a('string').and.not.empty;\n    expect(entry.newStatus).to.be.a('string').and.not.empty;\n    expect(entry.timestamp).to.be.a('string').and.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\n  });\n}\nexpect(content).to.have.all.keys('equipmentId', 'history', 'total', 'limit', 'offset', 'hasMore');",
                  "err": {},
                  "uuid": "812891f2-89bd-429d-ab15-6447c2242031",
                  "parentUUID": "dcfbbacc-70d6-40f1-acf9-47bc2795db87",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c16d0d1-d1d2-48a4-b34f-943a2edb180d",
                "0ce9506a-63aa-4839-9f2d-6b8a640f36ee",
                "4ed3b259-015e-4491-96dc-171a3d38fd1d",
                "812891f2-89bd-429d-ab15-6447c2242031"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1221,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "6b753f0a-30cc-4cde-9f5f-44f9e7137d52",
              "title": "Equipment Status Tracker Negative Tests",
              "fullFile": "/Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/tests/equipmentlist.js",
              "file": "/tests/equipmentlist.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "API005 POST without name",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API005 POST without name",
                  "timedOut": false,
                  "duration": 302,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { status: 'InvalidStatus', location: location };\nconst content = await attempt.toPost400(fromEquipment, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Name, status, and location are required');",
                  "err": {},
                  "uuid": "9d435ad2-aeab-4108-a827-1c1f010d83d6",
                  "parentUUID": "6b753f0a-30cc-4cde-9f5f-44f9e7137d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API006 POST without status",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API006 POST without status",
                  "timedOut": false,
                  "duration": 320,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { name: faker.commerce.productName(), location: location };\nconst content = await attempt.toPost400(fromEquipment, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Name, status, and location are required');",
                  "err": {},
                  "uuid": "cfc586b9-b168-437b-b56b-fcd60ab87217",
                  "parentUUID": "6b753f0a-30cc-4cde-9f5f-44f9e7137d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API007 POST without location",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API007 POST without location",
                  "timedOut": false,
                  "duration": 292,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { name: faker.commerce.productName(), status: 'Active' };\nconst content = await attempt.toPost400(fromEquipment, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Name, status, and location are required');",
                  "err": {},
                  "uuid": "27057041-e9b5-4979-b318-98ea90f70822",
                  "parentUUID": "6b753f0a-30cc-4cde-9f5f-44f9e7137d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API008 POST with empty name",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API008 POST with empty name",
                  "timedOut": false,
                  "duration": 306,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { name: '', status: 'Active', location: location };\nconst content = await attempt.toPost400(fromEquipment, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Name, status, and location are required');",
                  "err": {},
                  "uuid": "f707d2b3-6f6a-477b-8b1a-86af9dd3cdb8",
                  "parentUUID": "6b753f0a-30cc-4cde-9f5f-44f9e7137d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API009 POST with empty location",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API009 POST with empty location",
                  "timedOut": false,
                  "duration": 288,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { name: faker.commerce.productName(), status: 'Active', location: '' };\nconst content = await attempt.toPost400(fromEquipment, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Name, status, and location are required');",
                  "err": {},
                  "uuid": "dff87ba5-4821-4f3c-afbf-8b358d7c6569",
                  "parentUUID": "6b753f0a-30cc-4cde-9f5f-44f9e7137d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API010 POST with empty status",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API010 POST with empty status",
                  "timedOut": false,
                  "duration": 287,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { name: faker.commerce.productName(), status: '', location: location };\nconst content = await attempt.toPost400(fromEquipment, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Name, status, and location are required');",
                  "err": {},
                  "uuid": "720cac64-233a-46c8-959f-77edb1d5ba2e",
                  "parentUUID": "6b753f0a-30cc-4cde-9f5f-44f9e7137d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API011 POST with empty payload",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API011 POST with empty payload",
                  "timedOut": false,
                  "duration": 291,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const content = await attempt.toPost400(fromEquipment, {});\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Name, status, and location are required');",
                  "err": {},
                  "uuid": "8e35014d-3e0f-4ea4-af9d-a10a9b79f1eb",
                  "parentUUID": "6b753f0a-30cc-4cde-9f5f-44f9e7137d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API012 POST with invalid status",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API012 POST with invalid status",
                  "timedOut": false,
                  "duration": 302,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { name: faker.commerce.productName(), status: 'InvalidStatus', location: location };\nconst content = await attempt.toPost400(fromEquipment, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Invalid status. Must be Active, Idle, or Under Maintenance');",
                  "err": {},
                  "uuid": "5f124d95-0cb4-4ba8-966c-ba533b573c09",
                  "parentUUID": "6b753f0a-30cc-4cde-9f5f-44f9e7137d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API013 POST with long name",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API013 POST with long name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "a709ad80-56be-422f-bf2d-3791d2775309",
                  "parentUUID": "6b753f0a-30cc-4cde-9f5f-44f9e7137d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API014 POST with long location",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API014 POST with long location",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "aa0dc2ff-4e8e-4710-b6b0-51a3f23ef799",
                  "parentUUID": "6b753f0a-30cc-4cde-9f5f-44f9e7137d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API015 POST update status with invalid equipment ID",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API015 POST update status with invalid equipment ID",
                  "timedOut": false,
                  "duration": 298,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { status: status };\nconst content = await attempt.toPost404(`${fromEquipment}/999999/status`, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Equipment not found');",
                  "err": {},
                  "uuid": "6f313d66-cd3b-4608-9237-e9e1f7ad8a04",
                  "parentUUID": "6b753f0a-30cc-4cde-9f5f-44f9e7137d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API016 POST update status with invalid equipment ID type",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API016 POST update status with invalid equipment ID type",
                  "timedOut": false,
                  "duration": 308,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { status: status };\nconst content = await attempt.toPost404(`${fromEquipment}/invalid/status`, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Equipment not found');",
                  "err": {},
                  "uuid": "3c285625-e41e-4044-bf86-d5f80cd0d30a",
                  "parentUUID": "6b753f0a-30cc-4cde-9f5f-44f9e7137d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API017 POST update status with invalid status",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API017 POST update status with invalid status",
                  "timedOut": false,
                  "duration": 292,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { status: 'Invalid' };\nconst content = await attempt.toPost400(`${fromEquipment}/${equipmentId}/status`, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Invalid status. Must be Active, Idle, or Under Maintenance');",
                  "err": {},
                  "uuid": "010feeef-42d0-46be-a142-b2f51aac180e",
                  "parentUUID": "6b753f0a-30cc-4cde-9f5f-44f9e7137d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API018 POST update status with empty status",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API018 POST update status with empty status",
                  "timedOut": false,
                  "duration": 334,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { status: '' };\nconst content = await attempt.toPost400(`${fromEquipment}/${equipmentId}/status`, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Status is required');",
                  "err": {},
                  "uuid": "3f5a75d6-8a55-42a4-8a04-11865a5754d7",
                  "parentUUID": "6b753f0a-30cc-4cde-9f5f-44f9e7137d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API019 POST update status without status",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API019 POST update status without status",
                  "timedOut": false,
                  "duration": 287,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = {};\nconst content = await attempt.toPost400(`${fromEquipment}/${equipmentId}/status`, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Status is required');",
                  "err": {},
                  "uuid": "1371c578-0451-490c-b418-ba8257fdde91",
                  "parentUUID": "6b753f0a-30cc-4cde-9f5f-44f9e7137d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API020 GET equipment history with invalid id",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API020 GET equipment history with invalid id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "9a987fbc-bdd8-4c62-bff4-ce3a239f6824",
                  "parentUUID": "6b753f0a-30cc-4cde-9f5f-44f9e7137d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API021 GET equipment history with invalid id type",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API021 GET equipment history with invalid id type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "305f0ad6-eaee-481b-92de-76a238a1d875",
                  "parentUUID": "6b753f0a-30cc-4cde-9f5f-44f9e7137d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API022 POST update status of an equipment from under mainteance",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API022 POST update status of an equipment from under mainteance",
                  "timedOut": false,
                  "duration": 630,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { name: faker.commerce.productName(), status: \"Under Maintenance\", location: location }\n    const content = await go.post(fromEquipment, payload);\n    let newId = content.id;\n    const payload1 = { status: status };\n const content1 = await attempt.toPost400(`${fromEquipment}/${newId}/status`, payload1);\n expect(content1.success).to.be.false;\n expect(content1.error).to.equal('Cannot change status of equipment under maintenance');",
                  "err": {},
                  "uuid": "4b5b5e02-d2f9-4f42-9083-9476fae1b5d2",
                  "parentUUID": "6b753f0a-30cc-4cde-9f5f-44f9e7137d52",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9d435ad2-aeab-4108-a827-1c1f010d83d6",
                "cfc586b9-b168-437b-b56b-fcd60ab87217",
                "27057041-e9b5-4979-b318-98ea90f70822",
                "f707d2b3-6f6a-477b-8b1a-86af9dd3cdb8",
                "dff87ba5-4821-4f3c-afbf-8b358d7c6569",
                "720cac64-233a-46c8-959f-77edb1d5ba2e",
                "8e35014d-3e0f-4ea4-af9d-a10a9b79f1eb",
                "5f124d95-0cb4-4ba8-966c-ba533b573c09",
                "6f313d66-cd3b-4608-9237-e9e1f7ad8a04",
                "3c285625-e41e-4044-bf86-d5f80cd0d30a",
                "010feeef-42d0-46be-a142-b2f51aac180e",
                "3f5a75d6-8a55-42a4-8a04-11865a5754d7",
                "1371c578-0451-490c-b418-ba8257fdde91",
                "4b5b5e02-d2f9-4f42-9083-9476fae1b5d2"
              ],
              "failures": [],
              "pending": [
                "a709ad80-56be-422f-bf2d-3791d2775309",
                "aa0dc2ff-4e8e-4710-b6b0-51a3f23ef799",
                "9a987fbc-bdd8-4c62-bff4-ce3a239f6824",
                "305f0ad6-eaee-481b-92de-76a238a1d875"
              ],
              "skipped": [],
              "duration": 4537,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "8a0fa9be-029e-4e21-b361-81eac0efc0b2",
          "title": "Equipment API — Performance (simple p95)",
          "fullFile": "/Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/tests/performance.js",
          "file": "/tests/performance.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "p95 GET /api/equipment <= 1000 ms",
              "fullTitle": "Equipment API — Performance (simple p95) p95 GET /api/equipment <= 1000 ms",
              "timedOut": false,
              "duration": 2031,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const d = await sample('/api/equipment', 'get', 6);\nconst p = p95(d);\nexpect(p).to.be.at.most(Number(PERF_MS));",
              "err": {},
              "uuid": "ac2b65fd-92e5-4963-8a43-38b2dd7b7525",
              "parentUUID": "8a0fa9be-029e-4e21-b361-81eac0efc0b2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ac2b65fd-92e5-4963-8a43-38b2dd7b7525"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2031,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "api_test_report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "api_test_report",
        "overwrite": "true"
      },
      "version": "6.2.0"
    }
  }
}