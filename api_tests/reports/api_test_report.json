{
  "stats": {
    "suites": 4,
    "tests": 29,
    "passes": 21,
    "pending": 0,
    "failures": 8,
    "start": "2025-08-16T12:50:37.323Z",
    "end": "2025-08-16T12:51:00.674Z",
    "duration": 23351,
    "testsRegistered": 29,
    "passPercent": 72.41379310344827,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "06118fde-d7ad-477d-91f4-6f1fd44f1a59",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b613c1c9-4aae-48ec-afff-2fd2dbf69057",
          "title": "Equipment Tracker API tests",
          "fullFile": "/Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/tests/equipmentlist.js",
          "file": "/tests/equipmentlist.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Test Data- Create a new equipment in \"Equipment Tracker API tests\"",
              "fullTitle": "Equipment Tracker API tests \"before all\" hook: Test Data- Create a new equipment in \"Equipment Tracker API tests\"",
              "timedOut": false,
              "duration": 312,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = { name: random.generateEquipmentNames()[0], status: status, location: location }\nconst content = await go.post(fromEquipment, payload);\nequipmentId = content.id;",
              "err": {},
              "uuid": "454a5dd7-302a-4079-8ce0-d4e7513d615d",
              "parentUUID": "b613c1c9-4aae-48ec-afff-2fd2dbf69057",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: Delete created equipment in \"Equipment Tracker API tests\"",
              "fullTitle": "Equipment Tracker API tests \"after all\" hook: Delete created equipment in \"Equipment Tracker API tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (equipmentId) {\n // await go.remove(`${fromEquipment}/${equipmentId}`)\n}",
              "err": {},
              "uuid": "3f7fd5c2-95fd-4985-80e6-6537b94f60e7",
              "parentUUID": "b613c1c9-4aae-48ec-afff-2fd2dbf69057",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "77ef2f89-c9ef-4ab7-8222-18da55ac0dd1",
              "title": "Equipment Status Tracker Positive Tests ",
              "fullFile": "/Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/tests/equipmentlist.js",
              "file": "/tests/equipmentlist.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "API001 Get all equipments and validate the keys",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Positive Tests  API001 Get all equipments and validate the keys",
                  "timedOut": false,
                  "duration": 305,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const content = await go.getAll(fromEquipment)\n      expect(content).to.be.an('array');\n      content.forEach(item => {\n        expect(item).to.have.all.keys(...equipmentKeys);\n        expect(item.id).to.be.a('number').and.greaterThan(0);\n        expect(item.name).to.be.a('string');\n        expect(item.status).to.be.a('string');\n        expect(item.location).to.be.a('string');\n        expect(item.status).to.be.oneOf(['Idle', 'Under Maintenance', 'Active']);\n      });",
                  "err": {},
                  "uuid": "1fe537e0-1568-44b8-a0d1-4c217b7800d8",
                  "parentUUID": "77ef2f89-c9ef-4ab7-8222-18da55ac0dd1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API002 POST Creates a new equipment in random status",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Positive Tests  API002 POST Creates a new equipment in random status",
                  "timedOut": false,
                  "duration": 292,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { name: random.generateEquipmentNames()[0], status: status, location: location }\nconst content = await go.post(fromEquipment, payload);\nexpect(content).to.have.property('name', payload.name);\nexpect(content).to.have.property('status', payload.status);\nexpect(content).to.have.property('location', payload.location);\nexpect(content).to.have.property('lastUpdated');\nexpect(content).to.have.property('id');\nexpect(content).to.have.all.keys('id', 'name', 'status', 'location', 'lastUpdated');\nexpect(content.id).to.be.a('number').and.greaterThan(0);\nexpect(content.name).to.be.a('string').and.not.empty;\nexpect(content.status).to.be.a('string').and.not.empty;\nexpect(content.location).to.be.a('string').and.not.empty;\nexpect(content.lastUpdated).to.be.a('string').and.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\nexpect(content.status).to.be.oneOf(['Idle', 'Under Maintenance', 'Active']);\nexpect(content.id).to.be.a('number').and.greaterThan(0);",
                  "err": {},
                  "uuid": "5bee8a2c-f472-4273-9861-91973a204f21",
                  "parentUUID": "77ef2f89-c9ef-4ab7-8222-18da55ac0dd1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API003 POST Updates status of equipment",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Positive Tests  API003 POST Updates status of equipment",
                  "timedOut": false,
                  "duration": 305,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { status: status };\nconst content = await go.post(`${fromEquipment}/${equipmentId}/status`, payload);\nexpect(content.equipment.status).to.be.oneOf(['Idle', 'Under Maintenance', 'Active']);\nexpect(content.equipment).to.have.property('id', equipmentId);\nexpect(content.equipment).to.have.property('lastUpdated');\nexpect(content.equipment).to.have.property('name');\nexpect(content.equipment).to.have.property('location');\nexpect(content.equipment).to.have.all.keys('id', 'name', 'status', 'location', 'lastUpdated');\nexpect(content.equipment.id).to.equal(equipmentId);\nexpect(content.historyEntry.equipmentId).to.equal(equipmentId);\nexpect(content.historyEntry.previousStatus).to.be.oneOf(['Idle', 'Under Maintenance', 'Active']);\nexpect(content.historyEntry.newStatus).to.equal(status);\nexpect(content.historyEntry.timestamp).to.be.a('string').and.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\nexpect(content.historyEntry.changedBy).to.be.a('string').and.not.empty;\nexpect(content.historyEntry).to.have.all.keys('id', 'equipmentId', 'previousStatus', 'newStatus', 'timestamp', 'changedBy');",
                  "err": {},
                  "uuid": "f4f99077-360c-486f-85cd-a5015c44016d",
                  "parentUUID": "77ef2f89-c9ef-4ab7-8222-18da55ac0dd1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API004 GET equipment history",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Positive Tests  API004 GET equipment history",
                  "timedOut": false,
                  "duration": 510,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const content = await go.getAll(`${fromEquipment}/${equipmentId}/history`);\nexpect(content.equipmentId).to.equal(equipmentId);\nexpect(content.history).to.be.an('array');\nif (content.history.length > 0) {\n  content.history.forEach(entry => {\n    expect(entry).to.have.all.keys('id', 'equipmentId', 'previousStatus', 'newStatus', 'timestamp', 'changedBy');\n    expect(entry.equipmentId).to.equal(equipmentId);\n    expect(entry.previousStatus).to.be.a('string').and.not.empty;\n    expect(entry.newStatus).to.be.a('string').and.not.empty;\n    expect(entry.timestamp).to.be.a('string').and.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\n  });\n}\nexpect(content).to.have.all.keys('equipmentId', 'history', 'total', 'limit', 'offset', 'hasMore');",
                  "err": {},
                  "uuid": "56216ec7-3b3b-4817-abb8-9c91dc79ee77",
                  "parentUUID": "77ef2f89-c9ef-4ab7-8222-18da55ac0dd1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API005 GET equipment history with limit and offset",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Positive Tests  API005 GET equipment history with limit and offset",
                  "timedOut": false,
                  "duration": 6479,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "for(let i = 0; i < 20; i++) {\n  const payload = { status: random.generateRandomStatus() };\n  await go.create(`${fromEquipment}/${equipmentId}/status`, payload);\n}\nlet limitValue = 5|8|10;\nlet offsetValue = 2|3;\nconst content = await go.getAll(`${fromEquipment}/${equipmentId}/history?limit=${limitValue}&offset=${offsetValue}`);\nexpect(content.equipmentId).to.equal(equipmentId);\nexpect(content.limit).to.equal(limitValue);\nexpect(content.offset).to.equal(offsetValue);\nexpect(content.total).to.be.a('number');\nexpect(content.hasMore).to.be.a('boolean');\nexpect(content.history).to.be.an('array');\nif (content.history.length > 0) {\n  content.history.forEach(entry => {\n    expect(entry).to.have.all.keys('id', 'equipmentId', 'previousStatus', 'newStatus', 'timestamp', 'changedBy');\n    expect(entry.equipmentId).to.equal(equipmentId);\n    expect(entry.previousStatus).to.be.a('string').and.not.empty;\n    expect(entry.newStatus).to.be.a('string').and.not.empty;\n    expect(entry.timestamp).to.be.a('string').and.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\n  });\n}\nexpect(content).to.have.all.keys('equipmentId', 'history', 'total', 'limit', 'offset', 'hasMore');",
                  "err": {},
                  "uuid": "fbc62f1d-5b8e-48cf-9b3e-7513318f3e53",
                  "parentUUID": "77ef2f89-c9ef-4ab7-8222-18da55ac0dd1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API006 GET equipment history check pagination and no duplicate entries",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Positive Tests  API006 GET equipment history check pagination and no duplicate entries",
                  "timedOut": false,
                  "duration": 6559,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "for(let i = 0; i < 20; i++) {\n  const payload = { status: random.generateRandomStatus() };\n  await go.create(`${fromEquipment}/${equipmentId}/status`, payload);\n}\nlet limitValue = 5;\nlet offsetValue = 0;\nconst page1 = await go.getAll(`${fromEquipment}/${equipmentId}/history?limit=${limitValue}&offset=${offsetValue}`);\nconst page2 = await go.getAll(`${fromEquipment}/${equipmentId}/history?limit=${limitValue}&offset=${offsetValue + limitValue}`);\nexpect(page1).to.not.equal(page2);",
                  "err": {},
                  "uuid": "4588ef30-ae1f-40e5-8fac-b94ae4f6b79d",
                  "parentUUID": "77ef2f89-c9ef-4ab7-8222-18da55ac0dd1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1fe537e0-1568-44b8-a0d1-4c217b7800d8",
                "5bee8a2c-f472-4273-9861-91973a204f21",
                "f4f99077-360c-486f-85cd-a5015c44016d",
                "56216ec7-3b3b-4817-abb8-9c91dc79ee77",
                "fbc62f1d-5b8e-48cf-9b3e-7513318f3e53",
                "4588ef30-ae1f-40e5-8fac-b94ae4f6b79d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14450,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "1ab42961-e9c6-423f-a567-46bde39b0082",
              "title": "Equipment Status Tracker Negative Tests",
              "fullFile": "/Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/tests/equipmentlist.js",
              "file": "/tests/equipmentlist.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "API007 POST without name",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API007 POST without name",
                  "timedOut": false,
                  "duration": 291,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { status: 'InvalidStatus', location: location };\nconst content = await attempt.toPost400(fromEquipment, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Name, status, and location are required');",
                  "err": {},
                  "uuid": "87209f7a-dee0-4f44-8660-c56a8b2ac0ed",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API008 POST without status",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API008 POST without status",
                  "timedOut": false,
                  "duration": 293,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { name: faker.commerce.productName(), location: location };\nconst content = await attempt.toPost400(fromEquipment, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Name, status, and location are required');",
                  "err": {},
                  "uuid": "637611c4-60e6-4b99-9ef1-53ddc608385e",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API009 POST without location",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API009 POST without location",
                  "timedOut": false,
                  "duration": 290,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { name: faker.commerce.productName(), status: 'Active' };\nconst content = await attempt.toPost400(fromEquipment, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Name, status, and location are required');",
                  "err": {},
                  "uuid": "b1a0b4f5-b5d5-47af-befd-e7efc834e46d",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API010 POST with empty name",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API010 POST with empty name",
                  "timedOut": false,
                  "duration": 295,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { name: '', status: 'Active', location: location };\nconst content = await attempt.toPost400(fromEquipment, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Name, status, and location are required');",
                  "err": {},
                  "uuid": "2eaa83f4-b6e7-4eca-9308-48fa95b7f6fd",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API011 POST with empty location",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API011 POST with empty location",
                  "timedOut": false,
                  "duration": 300,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { name: faker.commerce.productName(), status: 'Active', location: '' };\nconst content = await attempt.toPost400(fromEquipment, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Name, status, and location are required');",
                  "err": {},
                  "uuid": "760a5e37-2916-4a6d-99d2-e0bb18f84497",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API012 POST with empty status",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API012 POST with empty status",
                  "timedOut": false,
                  "duration": 297,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { name: faker.commerce.productName(), status: '', location: location };\nconst content = await attempt.toPost400(fromEquipment, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Name, status, and location are required');",
                  "err": {},
                  "uuid": "0b4f7f4c-9aad-4c08-8ebb-a6cdfed00f9e",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API013 POST with empty payload",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API013 POST with empty payload",
                  "timedOut": false,
                  "duration": 311,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const content = await attempt.toPost400(fromEquipment, {});\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Name, status, and location are required');",
                  "err": {},
                  "uuid": "27871af1-9f82-44f5-85ed-bfb59311d703",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API014 POST with invalid status",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API014 POST with invalid status",
                  "timedOut": false,
                  "duration": 292,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { name: faker.commerce.productName(), status: 'InvalidStatus', location: location };\nconst content = await attempt.toPost400(fromEquipment, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Invalid status. Must be Active, Idle, or Under Maintenance');",
                  "err": {},
                  "uuid": "4e47de6b-6ad0-4be3-a67b-86df0a0e076f",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API015 POST with long name",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API015 POST with long name",
                  "timedOut": false,
                  "duration": 290,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { name: faker.string.sample(120), status: status, location: location };\nconst content = await attempt.toPost400(fromEquipment, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Name must be between 1 and 100 characters');",
                  "err": {
                    "message": "Error: expected 400 \"Bad Request\", got 201 \"Created\"",
                    "estack": "Error: expected 400 \"Bad Request\", got 201 \"Created\"\n    at Object.toPost400 (helpers/assertions.js:35:10)\n    at Context.<anonymous> (tests/equipmentlist.js:189:37)\n    at process.processImmediate (node:internal/timers:511:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/supertest/lib/test.js:365:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n    at Test.assert (node_modules/supertest/lib/test.js:195:23)\n    at localAssert (node_modules/supertest/lib/test.js:138:14)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/supertest/lib/test.js:156:7\n    at Request.callback (node_modules/superagent/lib/node/index.js:847:12)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/superagent/lib/node/index.js:1102:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
                    "diff": null
                  },
                  "uuid": "674c8bbb-f8c7-4b7c-a806-638db4d78219",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API016 POST with long location",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API016 POST with long location",
                  "timedOut": false,
                  "duration": 294,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { name: faker.commerce.productName(), status: status, location:faker.string.sample(120) };\nconst content = await attempt.toPost400(fromEquipment, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Location must be between 1 and 100 characters');",
                  "err": {
                    "message": "Error: expected 400 \"Bad Request\", got 201 \"Created\"",
                    "estack": "Error: expected 400 \"Bad Request\", got 201 \"Created\"\n    at Object.toPost400 (helpers/assertions.js:35:10)\n    at Context.<anonymous> (tests/equipmentlist.js:196:37)\n    at process.processImmediate (node:internal/timers:511:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/supertest/lib/test.js:365:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n    at Test.assert (node_modules/supertest/lib/test.js:195:23)\n    at localAssert (node_modules/supertest/lib/test.js:138:14)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/supertest/lib/test.js:156:7\n    at Request.callback (node_modules/superagent/lib/node/index.js:847:12)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/superagent/lib/node/index.js:1102:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
                    "diff": null
                  },
                  "uuid": "0b6673bb-a01c-4cfa-afb2-17837f903e74",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API017 POST update status with invalid equipment ID",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API017 POST update status with invalid equipment ID",
                  "timedOut": false,
                  "duration": 294,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { status: status };\nconst content = await attempt.toPost404(`${fromEquipment}/999999/status`, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Equipment not found');",
                  "err": {},
                  "uuid": "e3c798a9-cb5c-4955-a6a7-527f9ed454a1",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API018 POST update status with invalid equipment ID type",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API018 POST update status with invalid equipment ID type",
                  "timedOut": false,
                  "duration": 292,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { status: status };\nconst content = await attempt.toPost404(`${fromEquipment}/invalid/status`, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Equipment not found');",
                  "err": {},
                  "uuid": "18c34339-025e-420a-b464-6f5b3e015e55",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API019 POST update status with invalid status",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API019 POST update status with invalid status",
                  "timedOut": false,
                  "duration": 298,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { status: 'Invalid' };\nconst content = await attempt.toPost400(`${fromEquipment}/${equipmentId}/status`, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Invalid status. Must be Active, Idle, or Under Maintenance');",
                  "err": {},
                  "uuid": "a5db3e93-85db-42fb-b4ae-02e8e0e6e64f",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API020 POST update status with empty status",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API020 POST update status with empty status",
                  "timedOut": false,
                  "duration": 293,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { status: '' };\nconst content = await attempt.toPost400(`${fromEquipment}/${equipmentId}/status`, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Status is required');",
                  "err": {},
                  "uuid": "61ca1792-0bae-4f61-a8a8-ce4beaaa08c9",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API021 POST update status without status",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API021 POST update status without status",
                  "timedOut": false,
                  "duration": 289,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = {};\nconst content = await attempt.toPost400(`${fromEquipment}/${equipmentId}/status`, payload);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Status is required');",
                  "err": {},
                  "uuid": "db6a7079-2e0c-411b-a9d6-b47dc40b0e26",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API022 GET equipment history with invalid id",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API022 GET equipment history with invalid id",
                  "timedOut": false,
                  "duration": 292,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const content = await attempt.toGet404(`${fromEquipment}/999999/history`);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Equipment not found');",
                  "err": {
                    "message": "Error: expected 404 \"Not Found\", got 200 \"OK\"",
                    "estack": "Error: expected 404 \"Not Found\", got 200 \"OK\"\n    at Object.toGet404 (helpers/assertions.js:22:10)\n    at Context.<anonymous> (tests/equipmentlist.js:237:37)\n    at process.processImmediate (node:internal/timers:511:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/supertest/lib/test.js:365:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n    at Test.assert (node_modules/supertest/lib/test.js:195:23)\n    at localAssert (node_modules/supertest/lib/test.js:138:14)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/supertest/lib/test.js:156:7\n    at Request.callback (node_modules/superagent/lib/node/index.js:847:12)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/superagent/lib/node/index.js:1102:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:57:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
                    "diff": null
                  },
                  "uuid": "295c7311-bf7f-479f-8625-89e92defac9e",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API023 GET equipment history with invalid id type",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API023 GET equipment history with invalid id type",
                  "timedOut": false,
                  "duration": 288,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const content = await attempt.toGet404(`${fromEquipment}/invalid/history`);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Equipment not found');",
                  "err": {
                    "message": "Error: expected 404 \"Not Found\", got 200 \"OK\"",
                    "estack": "Error: expected 404 \"Not Found\", got 200 \"OK\"\n    at Object.toGet404 (helpers/assertions.js:22:10)\n    at Context.<anonymous> (tests/equipmentlist.js:243:37)\n    at process.processImmediate (node:internal/timers:511:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/supertest/lib/test.js:365:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n    at Test.assert (node_modules/supertest/lib/test.js:195:23)\n    at localAssert (node_modules/supertest/lib/test.js:138:14)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/supertest/lib/test.js:156:7\n    at Request.callback (node_modules/superagent/lib/node/index.js:847:12)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/superagent/lib/node/index.js:1102:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:57:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
                    "diff": null
                  },
                  "uuid": "32de3cb0-3b97-43d6-bd99-af9ddbf1e646",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API024 POST update status of an equipment from under maintenance",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API024 POST update status of an equipment from under maintenance",
                  "timedOut": false,
                  "duration": 589,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = { name: random.generateEquipmentNames()[0], status: \"Under Maintenance\", location: location }\n    const content = await go.post(fromEquipment, payload);\n    let newId = content.id;\n    const payload1 = { status: status };\n const content1 = await attempt.toPost400(`${fromEquipment}/${newId}/status`, payload1);\n expect(content1.success).to.be.false;\n expect(content1.error).to.equal('Cannot change status of equipment under maintenance');",
                  "err": {},
                  "uuid": "921f9243-4d7b-40e8-8a8e-8e8eac7e72bc",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API025 GET equipment history with invalid limit",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API025 GET equipment history with invalid limit",
                  "timedOut": false,
                  "duration": 297,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let limitValue = -1; // Invalid limit\nlet offsetValue = 2;\nconst content = await attempt.toGet400(`${fromEquipment}/${equipmentId}/history?limit=${limitValue}&offset=${offsetValue}`);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Invalid limit');",
                  "err": {
                    "message": "Error: expected 400 \"Bad Request\", got 200 \"OK\"",
                    "estack": "Error: expected 400 \"Bad Request\", got 200 \"OK\"\n    at Object.toGet400 (helpers/assertions.js:10:10)\n    at Context.<anonymous> (tests/equipmentlist.js:261:37)\n    at process.processImmediate (node:internal/timers:511:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/supertest/lib/test.js:365:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n    at Test.assert (node_modules/supertest/lib/test.js:195:23)\n    at localAssert (node_modules/supertest/lib/test.js:138:14)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/supertest/lib/test.js:156:7\n    at Request.callback (node_modules/superagent/lib/node/index.js:847:12)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/superagent/lib/node/index.js:1102:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:57:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
                    "diff": null
                  },
                  "uuid": "4e675b8f-075e-4932-acc4-4cae2550ae8c",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API026 GET equipment history with invalid offset",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API026 GET equipment history with invalid offset",
                  "timedOut": false,
                  "duration": 297,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let limitValue = 1; // Valid limit\nlet offsetValue = -2; // Invalid offset\nconst content = await attempt.toGet400(`${fromEquipment}/${equipmentId}/history?limit=${limitValue}&offset=${offsetValue}`);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Invalid offset');",
                  "err": {
                    "message": "Error: expected 400 \"Bad Request\", got 200 \"OK\"",
                    "estack": "Error: expected 400 \"Bad Request\", got 200 \"OK\"\n    at Object.toGet400 (helpers/assertions.js:10:10)\n    at Context.<anonymous> (tests/equipmentlist.js:269:37)\n    at process.processImmediate (node:internal/timers:511:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/supertest/lib/test.js:365:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n    at Test.assert (node_modules/supertest/lib/test.js:195:23)\n    at localAssert (node_modules/supertest/lib/test.js:138:14)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/supertest/lib/test.js:156:7\n    at Request.callback (node_modules/superagent/lib/node/index.js:847:12)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/superagent/lib/node/index.js:1102:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:57:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
                    "diff": null
                  },
                  "uuid": "72d26e31-32e5-43a9-a7d1-77dc039de3fb",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API027 GET equipment history with invalid type limit",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API027 GET equipment history with invalid type limit",
                  "timedOut": false,
                  "duration": 296,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let limitValue = 'invalid'; // Invalid limit\nlet offsetValue = 2;\nconst content = await attempt.toGet400(`${fromEquipment}/${equipmentId}/history?limit=${limitValue}&offset=${offsetValue}`);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Invalid limit');",
                  "err": {
                    "message": "Error: expected 400 \"Bad Request\", got 200 \"OK\"",
                    "estack": "Error: expected 400 \"Bad Request\", got 200 \"OK\"\n    at Object.toGet400 (helpers/assertions.js:10:10)\n    at Context.<anonymous> (tests/equipmentlist.js:277:37)\n    at process.processImmediate (node:internal/timers:511:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/supertest/lib/test.js:365:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n    at Test.assert (node_modules/supertest/lib/test.js:195:23)\n    at localAssert (node_modules/supertest/lib/test.js:138:14)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/supertest/lib/test.js:156:7\n    at Request.callback (node_modules/superagent/lib/node/index.js:847:12)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/superagent/lib/node/index.js:1102:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:57:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
                    "diff": null
                  },
                  "uuid": "eff2f9be-0396-4206-8e1c-112b2f1a7adf",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "API028 GET equipment history with invalid offset",
                  "fullTitle": "Equipment Tracker API tests Equipment Status Tracker Negative Tests API028 GET equipment history with invalid offset",
                  "timedOut": false,
                  "duration": 299,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let limitValue = 1; // Valid limit\nlet offsetValue = 'invalid'; // Invalid offset\nconst content = await attempt.toGet400(`${fromEquipment}/${equipmentId}/history?limit=${limitValue}&offset=${offsetValue}`);\nexpect(content.success).to.be.false;\nexpect(content.error).to.equal('Invalid offset');",
                  "err": {
                    "message": "Error: expected 400 \"Bad Request\", got 200 \"OK\"",
                    "estack": "Error: expected 400 \"Bad Request\", got 200 \"OK\"\n    at Object.toGet400 (helpers/assertions.js:10:10)\n    at Context.<anonymous> (tests/equipmentlist.js:285:37)\n    at process.processImmediate (node:internal/timers:511:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/supertest/lib/test.js:365:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n    at Test.assert (node_modules/supertest/lib/test.js:195:23)\n    at localAssert (node_modules/supertest/lib/test.js:138:14)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/supertest/lib/test.js:156:7\n    at Request.callback (node_modules/superagent/lib/node/index.js:847:12)\n    at /Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/node_modules/superagent/lib/node/index.js:1102:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at Stream.emit (node:events:513:28)\n    at Unzip.<anonymous> (node_modules/superagent/lib/node/unzip.js:57:12)\n    at Unzip.emit (node:events:513:28)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
                    "diff": null
                  },
                  "uuid": "6e6ac981-5b51-430e-98e1-8df5a2e290f9",
                  "parentUUID": "1ab42961-e9c6-423f-a567-46bde39b0082",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "87209f7a-dee0-4f44-8660-c56a8b2ac0ed",
                "637611c4-60e6-4b99-9ef1-53ddc608385e",
                "b1a0b4f5-b5d5-47af-befd-e7efc834e46d",
                "2eaa83f4-b6e7-4eca-9308-48fa95b7f6fd",
                "760a5e37-2916-4a6d-99d2-e0bb18f84497",
                "0b4f7f4c-9aad-4c08-8ebb-a6cdfed00f9e",
                "27871af1-9f82-44f5-85ed-bfb59311d703",
                "4e47de6b-6ad0-4be3-a67b-86df0a0e076f",
                "e3c798a9-cb5c-4955-a6a7-527f9ed454a1",
                "18c34339-025e-420a-b464-6f5b3e015e55",
                "a5db3e93-85db-42fb-b4ae-02e8e0e6e64f",
                "61ca1792-0bae-4f61-a8a8-ce4beaaa08c9",
                "db6a7079-2e0c-411b-a9d6-b47dc40b0e26",
                "921f9243-4d7b-40e8-8a8e-8e8eac7e72bc"
              ],
              "failures": [
                "674c8bbb-f8c7-4b7c-a806-638db4d78219",
                "0b6673bb-a01c-4cfa-afb2-17837f903e74",
                "295c7311-bf7f-479f-8625-89e92defac9e",
                "32de3cb0-3b97-43d6-bd99-af9ddbf1e646",
                "4e675b8f-075e-4932-acc4-4cae2550ae8c",
                "72d26e31-32e5-43a9-a7d1-77dc039de3fb",
                "eff2f9be-0396-4206-8e1c-112b2f1a7adf",
                "6e6ac981-5b51-430e-98e1-8df5a2e290f9"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6777,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "03612087-1b28-4365-9d7e-016f11473a38",
          "title": "Equipment API — Performance (simple p95)",
          "fullFile": "/Users/vidhya/Desktop/qa/equipment-status-tracker/api_tests/tests/performance.js",
          "file": "/tests/performance.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "PERF_001 p95 GET /api/equipment <= 1000 ms",
              "fullTitle": "Equipment API — Performance (simple p95) PERF_001 p95 GET /api/equipment <= 1000 ms",
              "timedOut": false,
              "duration": 1777,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const d = await sample('/api/equipment', 'get', 6);\nconst p = p95(d);\nexpect(p).to.be.at.most(Number(PERF_MS));",
              "err": {},
              "uuid": "89e4198d-df2f-4082-8149-0407a859e316",
              "parentUUID": "03612087-1b28-4365-9d7e-016f11473a38",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "89e4198d-df2f-4082-8149-0407a859e316"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1777,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "api_test_report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "api_test_report",
        "overwrite": "true"
      },
      "version": "6.2.0"
    }
  }
}